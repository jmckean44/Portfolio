---
import { type Item, items } from '../../data';
import Layout from '../../layouts/Layout.astro';
import ItemCard from '../../components/ItemCard.astro';
import { getImage } from 'astro:assets';
import myImage from '../../img/arrow-back.svg';
const close = await getImage({ src: myImage });
const { slug } = Astro.params;

export function getStaticPaths() {
	return [
		...items.map((item) => ({
			params: {
				slug: item.slug,
				website: item.website,
			},
		})),
	];
}

const item = items.find((item) => item.slug === slug) as Item;
if (!item) {
	throw new Error(`Item with slug "${slug}" not found`);
}
---

<Layout pageTitle={item.name} pageSiteTitles="">
	<div class="container" id="grid-work-container">
		<div class="grid work">
			<div>
				<a href={item.website} target="_blank" role="button" aria-label="New tab link to website" class="button">
					<img src={item.image} alt={item.name} class="website-img" transition:name={`${slug} image`} /></a
				>
			</div>
			<div>
				<a href="/#filter-sites" class="close" transition:name={`${slug} close`} role="button" style={`background-image: url('${close.src}')`}>BACK</a>
				<h1>
					{item.name}
				</h1>
				<p class="link" transition:name={`${slug} link`}>
					<a href={item.website} target="_blank">{item.link}</a>
				</p>
				<p class="description" transition:name={`${slug} description`}>
					{item.description}
				</p>
				<p class="details" transition:name={`${slug} details`}>
					{item.details}
				</p>

				<a href={item.website} transition:name={`${slug} website`} target="_blank" role="button" aria-label="New tab link to website" class="website button">WEBSITE</a>
				<!-- <a href={item.featured} type="button" role="button" aria-label="Link to featured video" class="website" class="button">Featured Video</a> -->
				<!-- 
				<a href="/#filter-sites" class="close" transition:name={`${slug} close`} role="button" style={`background-image: url('${close.src}')`}>BACK</a> -->
			</div>
		</div>
	</div>
	<div class="container-items">
		<div class="flex">
			{items.filter((p) => p.category === item.category && p.id !== item.id).map((pr) => <ItemCard item={pr} />)}
		</div>
		<!-- <div class="grid-container"></div> -->
	</div>

	<script>
		document.addEventListener('click', (event) => {
			if (location.pathname === '/') return;
			if ((event as any)?.target?.tagName === 'A') {
				document.querySelector('.animate-in')?.classList.add('opacity-0');
			}
		});
	</script>
	<style>
		.container-items {
			padding: 0 0.5rem;
			max-width: 1400px;
			margin: 0 auto;
		}

		/* .flex {
			gap: 1rem;
		} */
		.grid.work {
			--grid-layout-gap: 1rem;
			--grid-column-count: 3;
			--grid-item--min-width: 500px;

			--gap-count: calc(var(--grid-column-count) - 1);
			--total-gap-width: calc(var(--gap-count) * var(--grid-layout-gap));
			--grid-item--max-width: calc((100% - var(--total-gap-width)) / var(--grid-column-count));

			display: grid;
			grid-template-columns: repeat(auto-fill, minmax(max(var(--grid-item--min-width), var(--grid-item--max-width)), 1fr));
			grid-gap: var(--grid-layout-gap);
			align-items: center;
			gap: 2rem;
			position: relative;
			margin-top: 22.5%;
			margin-bottom: 4rem;
		}

		@media (max-width: 700px) {
			.grid.work {
				margin-top: 150px;
			}
		}
		@media (max-width: 520px) {
			.grid.work {
				grid-template-columns: 100%;
				align-items: center;
			}
		}
		h1 {
			font-size: min(max(2.5rem, 3.5vw), 50px);
			margin-bottom: 0.25rem;
			/* border: 1px red solid; */
		}
		.link {
			font-style: italic;
		}
		.details {
			font-family: 'CalibriBold', sans-serif;
			line-height: 1.3;
		}
		.website {
			color: #fff;
			background: #ff8000;
			border-radius: 2px;
			padding: 0.7rem 1rem 0.7rem;
			font-family: 'SteelfishRegular', sans-serif;
			font-weight: bold;
			font-size: 1.3rem;
			display: inline-block;
			letter-spacing: 2px;
			line-height: 1;
			cursor: pointer;
		}

		.website:hover {
			background: #3a3a42;
		}

		a {
			text-decoration: none;
		}

		h4 {
			animation: animate-in 0.5s ease-in-out;
		}
		.close-container {
			float: right;
		}
		.close {
			/* margin-top: 2rem; */
			padding: 0.5rem 0.75rem 0.5rem 1.7rem;
			background-size: 22px;
			background-repeat: no-repeat;
			background-position: center left 4px;
			background-color: #3a3a42;
			display: inline-block;
			border-radius: 2px;
			color: #fff;
			float: right;
			font-family: 'SteelfishRegular', sans-serif;
			letter-spacing: 2px;
			/* position: absolute;
			bottom: 0;
			right: 0; */
		}
		.close:hover {
			background-size: 22px !important;
			background: #ff8000;
			background-repeat: no-repeat;
			background-position: center left 0;
		}

		@media (max-width: 400px) {
			.grid.work {
				background: none;
				border-radius: 3px;
				padding: 0 0 1.3rem;
				gap: 2rem;
				position: relative;
				margin-top: 200px;
				margin-bottom: 3rem;
			}
		}

		@keyframes animate-in {
			0% {
				opacity: 0;
				transform: translateY(1rem);
			}
			to {
				opacity: 1;
				transform: translateY(0);
			}
		}
		@keyframes astroFadeInOut {
			0% {
				opacity: 1;
			}
			to {
				opacity: 0;
			}
		}
		@keyframes astroFadeIn {
			0% {
				opacity: 0;
			}
		}
	</style>
</Layout>
