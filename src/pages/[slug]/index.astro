---
import { type Product, products } from '../../data';
import Layout from '../../layouts/Layout.astro';
import ProductCard from '../../components/ProductCard.astro';
import { getImage } from 'astro:assets';
import myImage from '../../img/close.svg';
const close = await getImage({ src: myImage });
const { slug } = Astro.params;

export function getStaticPaths() {
	return [
		...products.map((product) => ({
			params: {
				slug: product.slug,
				website: product.website,
			},
		})),
	];
}

const product = products.find((product) => product.slug === slug) as Product;
---

<Layout
	pageTitle="Learning Curve"
	pageSiteTitles=""
	title={product.name}
	description={product.description}
	details={product.details}
	description={product.description}
	description={product.link}
	website={product.website}
	image={product.image}>
	<div class="container">
		<div class="grid work">
			<div>
				<a href={product.website} target="_blank" type="button" role="button" aria-label="New tab link to website" class="button">
					<img src={product.image} alt={product.name} class="website-img" transition:name={`${slug} image`} /></a
				>
			</div>
			<div>
				<h1>
					{product.name}
				</h1>
				<p class="link" transition:name={`${slug} link`}>
					<a href={product.website} target="_blank">{product.link}</a>
				</p>
				<p transition:name={`${slug} description`}>
					{product.description}
				</p>
				<p class="details" transition:name={`${slug} details`}>
					{product.details}
				</p>

				<a href={product.website} transition:name={`${slug} website`} target="_blank" type="button" role="button" aria-label="New tab link to website" class="website" class="button">WEBSITE</a>
				<!-- <a href={product.featured} type="button" role="button" aria-label="Link to featured video" class="website" class="button">Featured Video</a> -->
				<div>
					<a href="/" class="close" transition:name={`${slug} close`} role="button" style={`background-image: url('${close.src}')`}></a>
				</div>
			</div>
		</div>
	</div>
	<div class="container-products">
		<div class="flex">
			{products.filter((p) => p.category === product.category && p.id !== product.id).map((pr) => <ProductCard product={pr} />)}
		</div>
		<!-- <div class="grid-container"></div> -->

		<script>
			document.addEventListener('click', (event) => {
				if (location.pathname === '/') return;
				if ((event as any)?.target?.tagName === 'A') {
					document.querySelector('.animate-in')?.classList.add('opacity-0');
				}
			});
		</script>
		<style>
			.container-products {
				padding: 0 1rem;
			}
			.flex {
				gap: 1rem;
			}
			.grid.work {
				--grid-layout-gap: 1rem;
				--grid-column-count: 3; /* This gets overridden by an inline style. */
				--grid-item--min-width: 500px; /* This gets overridden by an inline style. */

				--gap-count: calc(var(--grid-column-count) - 1);
				--total-gap-width: calc(var(--gap-count) * var(--grid-layout-gap));
				--grid-item--max-width: calc((100% - var(--total-gap-width)) / var(--grid-column-count));

				display: grid;
				grid-template-columns: repeat(auto-fill, minmax(max(var(--grid-item--min-width), var(--grid-item--max-width)), 1fr));
				grid-gap: var(--grid-layout-gap);

				/* grid-template-columns: repeat(auto-fill, minmax(400px, 1fr)); */
				align-items: center;
				background: #f5f5f5;
				border-radius: 5px;
				padding: 1.25rem;
				gap: 2rem;
				position: relative;
				margin-top: 22.5%;
				margin-bottom: 1rem;
			}

			@media (max-width: 700px) {
				.grid.work {
					margin-top: 150px;
				}
			}
			@media (max-width: 520px) {
				.grid.work {
					grid-template-columns: 100%;
					align-items: center;
				}
			}
			h1 {
				margin-bottom: 0.25rem;
				/* border: 1px red solid; */
			}
			.link {
				font-size: 1rem;
			}
			.details {
				font-weight: bold;
			}
			.website {
				color: #fff;
				background: #ff9000;
				border-radius: 2px;
				padding: 0.6rem 1rem 0.5rem;
				font-weight: bold;
				font-size: 1rem;
				display: inline-block;
				letter-spacing: 1px;
				line-height: 1;
				cursor: pointer;
			}

			.website:hover {
				background: #26262d;
			}

			a {
				text-decoration: none;
			}

			h4 {
				animation: animate-in 0.5s ease-in-out;
			}
			.close {
				margin-top: 2rem;
				padding: 1rem;
				background-size: 15px;
				background-repeat: no-repeat;
				background-position: center;
				background-color: #fff;
				border: 1px #ccc solid;
				display: inline-block;
				border-radius: 30px;
				position: absolute;
				bottom: 1.5rem;
				right: 1.5rem;
			}
			.close:hover {
				background-image: url('../img/close-wh.svg') no-repeat;
				background-color: #ff9000;
				background-size: 15px;
				background-position: center;
				border: 1px #ff9000 solid;
			}
			p {
				font-size: min(max(0.9rem, 1.25vw), 22px);
			}

			@keyframes animate-in {
				0% {
					opacity: 0;
					transform: translateY(1rem);
				}
				to {
					opacity: 1;
					transform: translateY(0);
				}
			}
			@keyframes astroFadeInOut {
				0% {
					opacity: 1;
				}
				to {
					opacity: 0;
				}
			}
			@keyframes astroFadeIn {
				0% {
					opacity: 0;
				}
			}
		</style>
	</div></Layout
>
